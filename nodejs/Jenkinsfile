pipeline {
   agent {
        docker { image 'node:20' }
    }

    parameters {
        string(name: 'repository', defaultValue: '', description: 'The Repository Link')
        booleanParam(name: 'hasBuild', defaultValue: false, description: 'Does this app have build step?')
        booleanParam(name: 'hasTest', defaultValue: false, description: 'Does this app have tests step?')
        string(name: 'dockerImage', defaultValue: '', description: 'The docker image Link')
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage('Clone Repository') {
            steps {
                script {
                    sh "git clone ${params.repository} ."
                }
            }
        }

        stage('Add the dependencies') {
            steps {
                script {
                    sh "npm install  --ignore-scripts"
                }
            }
        }

        stage('Test the app') {
            when {
                expression { params.hasTest }
            }            
            steps {
                script {
                    sh "npm run test"
                }
            }
        }        

        stage('Build the app') {
            when {
                expression { params.hasBuild }
            }
            steps {
                script {
                    sh "npm run build"
                }
            }
        }


        stage('Build the container') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    }
                    def dockerImage = "${params.dockerImage}:latest"
                    sh "docker build -t ${params.dockerImage} ."
                    sh "docker push ${params.dockerImage}"
                }
            }
        }


    }
}
